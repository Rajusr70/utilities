#!/bin/bash

script_name=`basename $0`

function printUsage {
	echo "Usage: "
	echo "  $script_name"
	echo "  $script_name <file.hex>"
	echo "    eg. $script_name arduino.hex"
	echo "  $script_name -f <version>"
	echo "    eg. $script_name -f V12"
	echo "  $script_name -u <url>"
	echo "    eg. $script_name -u https://github.com/ninjablocks/arduino/raw/master/hex/v12_0.46.hex"
}

function exitSuccess {
        exit 0
}
function exitFail {
        exit 1
}
function exitUsage {
	printUsage
	exitFail
}
function exitCustom {
	# dont override custom hex
	echo "[System] `date` Arduino Update: custom hex detected, letting it be. Arduino NOT flashed." >> /var/log/ninjablock.log
	exitSuccess # so that upstart script can continue
}

function detectNinjaBeagleCape()
{
	local result='V11V12' #default to V11 V12 board
	local detectFile="/sys/class/gpio/gpio$NINJA_CAPE_DETECT_GPIO/value"
	if [ -e $detectFile ]
	then
		local detectValue=`cat $detectFile`
		if [[ $detectValue == 0 ]]; then #V12 cape grounded
			result='V121'
		fi
	fi
	echo "Arduino Cape: $result" >> /var/log/ninjablock.log
	echo "$result"
}

function setResetPin {
	if [[ -n $NINJA_HARDWARE_TYPE ]]; then
		if [ "$NINJA_HARDWARE_TYPE" == "RPI" ]; then
			uart=ttyAMA0
			flashPin=$NINJA_CRUST_V10_RESETGPIO
		elif [ "$NINJA_HARDWARE_TYPE" == "BBB" ] || [ "$NINJA_HARDWARE_TYPE" == "BBW" ]; then
	    		uart=ttyO1
			ninjaBeagleCape=$(detectNinjaBeagleCape)
			flashPin=$NINJA_CAPE_V11V12_RESETGPIO
			if [ $ninjaBeagleCape == 'V121' ]; then
				flashPin=$NINJA_CAPE_V121_RESETGPIO
			fi
		fi
	fi
}

official_update=false

# Define directories
# Setup the environment
if [ -f /etc/environment.local ]; then
	. /etc/environment.local
fi
setResetPin

code_dir=/opt/ninja
util_dir=/opt/utilities
tmp_dir=$util_dir/tmp
uri="http://s3.amazonaws.com/ninjablocks/code/${NINJA_CLIENT_NAME:-"beagle"}/arduino"

# Pull new code from repo
cd $tmp_dir
# Robustness hack
echo "[System] `date` Arduino Update Script Started (${NINJA_ENV:-"stable"})" >> /var/log/ninjablock.log

function flashArduino {

	if [[ ! -e $1 ]]
	then
		echo "$1 does not exist"
		exitFail
	fi
	if [[ -z $flashPin ]]; then
		echo "Cannot flash this board"
		exitFail
	fi

	echo '{"DEVICE":[{"G":"0","V":0,"D":999,"DA":"FFFFFF"}]}' > /dev/$uart
	sleep 2

	echo "[System] `date` Arduino Flashing Started" >> /var/log/ninjablock.log

	for i in 1 2 3 4
	do
		echo "[System] `date` Flashing Arduino...Pass $i." >> /var/log/ninjablock.log;
		echo "1" > /sys/class/gpio/gpio$flashPin/value;
		sleep 1;
		echo "0" > /sys/class/gpio/gpio$flashPin/value;
		#sleep 1;
		#sudo echo "1" > /sys/class/gpio/gpio38/value;
		#sleep 1;

		avrdude -C $util_dir/etc/avrdude.conf  -p atmega328p -c arduino -P /dev/$uart -b 57600 -D -U flash:w:$1:i;

		if [ "$?" = "0" ]; then
			echo "1" > /sys/class/gpio/gpio$flashPin/value;
			echo "[System] `date` Successfully flashed Arduino in pass $i." >> /var/log/ninjablock.log;
			#sudo touch /etc/opt/ninja/.has_updated_arduino
			if $official_update ; then
				rm arduino.hex
			fi
			sync
			exitSuccess
		fi
		echo "[System] `date` Flashing Arduino...Pass $i Failed!"
	done
	echo "[System] `date` Critical error! Failed flashing Arduino in 3 passes." >> /var/log/ninjablock.log
}

if [[ $# -eq 1 ]]
then
	if [[ $1 == -* ]] || [[ $1 == \? ]]; then
		exitUsage
	else #flash with filename given in params
		flashArduino $1
	fi
else
	url=""
	hex_name="arduino.hex" #default
	if [[ $# -ge 2 ]]
	then
		if [[ $1 == "-f" ]]
		then
			arduino_mv="$2_0.00"
                elif [[ $1 == "-u" ]]
		then
			arduino_mv="(userdefined)_(custom)"
			url="$2"
			hex_name=$(basename $url)
		else
			exitUsage
		fi
	else
		# attempt to fetch the model
		arduino_mv=$(/opt/utilities/bin/fetch_arduino_version)

		if [ "$?" != "0" ]
		then
			echo "[System] `date` Arduino Update Failed. Could not retrieve version number." >> /var/log/ninjablock.log
			echo "Arduino Update Failed. Could not retrieve version number."
			echo "(perhaps try to force flash)" 
			exitUsage
		fi
	fi
	if [[ $url == "" ]]
        then
		is_auto_url="1"
	fi
	if [ -n "$arduino_mv" ]
	then
		if [[ "$arduino_mv" == *_* ]] # if the response is not null, and is in the form model_version
		then
			# split the string by "_"
			arduino_model=$(echo $arduino_mv | awk '{split($0, arduino, "_") } END{print arduino[1]}')
			arduino_version=$(echo $arduino_mv | awk '{split($0, arduino, "_") } END{print arduino[2]}')
			if [[ $is_auto_url == "1" ]] && ! [[ "$arduino_version" =~ ^[0-9]+([.][0-9]+)?$ ]]
			then # auto-updating board which gave a non number version
				exitCustom
			else
				echo "[System] `date` Arduino model: $arduino_model | version: $arduino_version will be updated." >> /var/log/ninjablock.log
				# include the model in the url to pull
				if [[ $is_auto_url == "1" ]]
	                	then
				    url="$uri/${arduino_model}/${NINJA_ENV:-"stable"}.hex"
				    checksum="$uri/${arduino_model}/${NINJA_ENV:-"stable"}.checksum"
				fi
	                	# Do a lookup to ensure the file exists
				code=$(curl -s -o /dev/null -I -w "%{http_code}" $url)
				if [ "$code" != "200" ]
				then
					if [[ $is_auto_url == "1" ]]
					then
						# fall back to stable
						# this is incase they have specified an environment with no arduino hex
						url="$uri/${arduino_model}/stable.hex"
						checksum="$uri/${arduino_model}/stable.checksum"
					fi
				fi
			fi
		else # responds to arduino version, but not expected NB response
			exitCustom
		fi
	else # no response to arduino version
		# Handle all the older arduino models not yet reporting version in new method
		echo "[System] `date` Arduino Update: falling back to V12 stable" >> /var/log/ninjablock.log
		url="$uri/V12/stable.hex"
		checksum="$uri/V12/stable.checksum"
	fi
	echo "[System] `date` Arduino Update Configured. Download starting." >> /var/log/ninjablock.log

	# Fetch the arduino hex
	# Do a lookup to ensure the file exists first
	code=$(curl -s -o /dev/null -I -w "%{http_code}" $url)
	if [ "$code" != "200" ]
	then
		echo "[System] `date` Arduino Update Failed. Could not fetch binary ($url)" >> /var/log/ninjablock.log
		echo "Arduino Update Failed. Could not fetch binary ($url)"
		exitFail
	fi
	curl --output $hex_name $url
	if [[ $is_auto_url != 1 ]]
	then
		if [ -e $hex_name ]
		then
			flashArduino $hex_name
		else
			echo "[System] `date` Could not retrieve custom arduino binary. ($url)" >> /var/log/ninjablock.log
		fi
	else
		# Fetch the remote checksum
		remote_checksum=$(curl $checksum | awk '{ print $1 }')
		# Calculate the local checksum
		local_checksum=$(sha1sum arduino.hex | awk '{ print $1 }')
		# If we have a file, have fetched the remote checksum, and it is the same as the local checksum
		if [ -e $hex_name ] && [ -n "$remote_checksum" ] && [ "$remote_checksum" = "$local_checksum" ]
		then
			official_update=true
			flashArduino $hex_name
		else
			echo "[System] `date` Could not retrieve valid arduino update binary." >> /var/log/ninjablock.log
		fi
	fi
	sync
fi
exitFail

